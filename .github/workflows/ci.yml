name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run tests
        run: |
          # Set environment variables to disable potentially problematic components
          export DISABLE_MCP_CLIENT_SYSTEM_EXIT=1
          export PYTEST_TIMEOUT=60
          export NO_DOCKER=1
          export MOCK_ALL_TOOLS=1
          export MOCK_MCP_CLIENT=1
          export SKIP_DOCKER_CHECKS=1
          # Prepare mock environment to ensure Docker isn't used
          mkdir -p ~/.local/share/mcp/tools/
          # Create an explicit mock script to run before pytest
          echo "import reactive_agents.tests.ci_mock; print('CI mocks loaded successfully')" > ci_pytest_loader.py
          # Run tests with CI-specific mock loader
          poetry run python ci_pytest_loader.py
          poetry run pytest -v --cov=./ --cov-report=xml --timeout=60 --no-header --tb=native -p no:docker
        timeout-minutes: 5
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
